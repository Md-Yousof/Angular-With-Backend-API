==================
Step for Evidence:
==================

1.First Run Given API project.(given by sir) 

2.Build it and then update-database from (PMC).

3.Run it and copy any port(http://localhost:40080/swagger) and run it from any browser.

-------
Exmple:
-------
https://localhost:40443/swagger/index.html 
or 
https://localhost:40080/swagger/index.html

done!!


[Note: If dont run then comment Authorize attribute from btoh city and country where ever it is present on.]

------------------------------------------------------------------------------------------------------------
-----------------
[ Angular Part ]
-----------------

==============================================
Take your project in differnt drive. 

Mind It!!!!Don't create project in C Drive 
==============================================

1. Create a Angular Project: Open cmd (press Windows Key + R)
----------------------------

	ng new projectName
	Routing=> Y
	CSS

2. Open the angular project in VS Code or visual studio. As your wish.

3. Run the angular project:   ng serve -o

=========================================================================================================
---------------------------
====If shows error then ===
---------------------------
go to your error path: Copy your the file path and delete ng.ps1 file from that folder.
---------------------

example path: C:\Users\Admin\AppData\Roaming\npm

===then ng serve -o run this command again

=========================================================================================================

4. Create Component, Service, Model In Site Root:(In project all component, models and services will be in seperate folder)
-------------------------------------------------

For List-Comonents:
==================

(src>app>components)
	ng g c city-list    ====(To create list-component)
	ng g c country-list    ====(To create list-component)

-------------------------------------------------------------------------------------------------
city-list.comonent.ts:
======================

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormArray } from '@angular/forms';
import { CityService } from '../../services/city.service';
import { CountryService } from '../../services/country.service';
import { City } from '../../models/city.model';
import { Country } from '../../models/country.model';

@Component({
  selector: 'app-city-list',
  templateUrl: './city-list.component.html',
  styleUrls: ['./city-list.component.css']
})
export class CityListComponent implements OnInit {
  cities: City[] = [];
  countries: Country[] = [];
  newCity: City = new City(0, '', 0, 0, 0, new Country(0, '', '', '', 0));
  newCountry: Country = new Country(0, '', '', '', 0);
  cityForm!: FormGroup;
  cityControls: FormGroup[] = [];


  editingCity: City | null = null;


  constructor(
    private formBuilder: FormBuilder,

    private cityService: CityService,
    private countryService: CountryService
  ) { }

  ngOnInit() {
    this.createCityForm();
    this.loadCities();
    this.loadCountries();


  }

  createCityForm() {
    this.cityForm = this.formBuilder.group({
      countryId: 0,
      name: '',
      iso2: '',
      iso3: '',
      cities: this.formBuilder.array([])
    });

  }


  loadCities() {
    this.cityService.getCities().subscribe({
      next: response => {
        console.log(response);
        this.cities = response.data;
      },
      error: error => {
        console.error('Error loading cities:', error);
      }
    });
  }

  loadCountries() {
    this.countryService.getCountries().subscribe({
      next: response => {
        console.log(response);
        this.countries = response.data;
      },
      error: error => {
        console.error('Error loading countries:', error);
      }
    });
  }

  getCountryName(countryId: number): string {
    const country = this.countries.find(c => c.id === countryId);
    return country ? country.name : 'Unknown';

  }




  deleteCity(city: City) {
    if (confirm('Are you sure you want to delete this city?')) {
      this.cityService.deleteCity(city.id).subscribe({
        next: () => {
          console.log('City deleted:', city);
          this.loadCities();
        },
        error: (error: any) => {
          console.error('Error deleting city:', error);
        }
      });
    }
  }

  addCity() {
    const cities = this.cityForm.get('cities') as FormArray;
    cities.push(this.formBuilder.group({
      name: '',
      lat: 0,
      lon: 0
    }));
    this.cityControls = cities.controls as FormGroup[];
  }

  removeCity(index: number) {
    const cities = this.cityForm.get('cities') as FormArray;
    cities.removeAt(index);
    this.cityControls.splice(index, 1);
  }

  saveCities() {
    if (this.cityForm) {
      const countryId = this.cityForm.get('countryId')?.value;

      if (countryId === 0) {
        this.createCountryAndCities();
      }
      else {
        this.createCities(countryId);
      }
    }
  }


  createCountryAndCities() {
    const countryData = {
      name: this.cityForm.get('name')?.value,
      iso2: this.cityForm.get('iso2')?.value,
      iso3: this.cityForm.get('iso3')?.value,
    };

    this.countryService.postCountry(countryData).subscribe({
      next: (countryResponse: any) => {
        console.log('Country created:', countryResponse);


        this.newCity.countryId = countryResponse.id;
        this.newCity.country = countryResponse as Country;

        this.createCities(countryResponse.id);

        this.loadCities();
        this.loadCountries();


      },
      error: (countryError: any) => {
        console.error('Error creating country:', countryError);
      }
    });

  }

  createCities(countryId: number) {
    const citiesArray = this.cityForm.get('cities') as FormArray;
    const citiesData = citiesArray.getRawValue();
    citiesData.forEach(cityData => {
      cityData.countryId = countryId;  // <-- Add this line
      this.cityService.postCity(cityData).subscribe({
        next: (response: any) => {
          console.log('City created:', response);
          this.loadCities();
        },
        error: (error: any) => {
          console.error('Error creating city:', error);
        }
      });
    });

    this.cityForm.reset();
    this.cityControls = [];


  }




  addCityControl(city: City) {
    const cities = this.cityForm.get('cities') as FormArray;
    cities.push(this.formBuilder.group({
      id: city.id,
      name: city.name,
      lat: city.lat,
      lon: city.lon
    }));
    this.cityControls = cities.controls as FormGroup[];
  }


  editCity(city: City) {
    this.editingCity = { ...city };
  }

  cancelEdit() {
    this.editingCity = null;
  }

  saveEdit() {
    if (this.editingCity) {
      this.cityService.updateCity(this.editingCity.id, this.editingCity).subscribe({
        next: response => {
          console.log('City updated:', response);
          this.loadCities();
          this.editingCity = null;
        },
        error: error => {
          console.error('Error updating city:', error);
        }
      });
    }
  }

}

-----------------------------------------------------------------------------------------
city-list.component.html:
=======================
<div class="container">
  <h2>City List</h2>
  <table class="table table-bordered">
    <thead>
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Latitude</th>
        <th>Longitude</th>
        <th>Country</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let city of cities">
        <td>{{ city.id }}</td>
        <td>{{ city.name }}</td>
        <td>{{ city.lat }}</td>
        <td>{{ city.lon }}</td>
        <td>
          {{ getCountryName(city.countryId) }}
        </td>
        <td>
          <button class="btn btn-info" (click)="editCity(city)">Edit</button>
          <button class="btn btn-danger" (click)="deleteCity(city)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<div class="container" *ngIf="!editingCity">
  <h4>Select Country</h4>
  <form [formGroup]="cityForm" (ngSubmit)="saveCities()">
    <label for="countryId">Country:</label>
    <select id="countryId" formControlName="countryId" class="form-control">
      <option value="0">Create New Country</option>
      <option *ngFor="let country of countries" [value]="country.id">{{ country.name }}</option>
    </select>


    <div *ngIf="cityForm.get('countryId')?.value === 0">

      <label for="name">Country Name:</label>
      <input type="text" formControlName="name" class="form-control" required>

      <label for="iso2">Country ISO2:</label>
      <input type="text" formControlName="iso2" class="form-control" required>

      <label for="iso3">Country ISO3:</label>
      <input type="text" formControlName="iso3" class="form-control" required>
    </div>



    <hr>
    <h4>Create City</h4>


    <hr>
    <div formArrayName="cities">
      <div *ngFor="let city of cityControls; let i = index" class="mb-3">
        <div [formGroupName]="i" class="border p-3">


          <label for="name{{i}}" class="form-label">City Name:</label>
          <input type="text" id="name{{i}}" formControlName="name" class="form-control">
          <label for="lat{{i}}" class="form-label">Latitude:</label>
          <input type="number" id="lat{{i}}" formControlName="lat" class="form-control">
          <label for="lon{{i}}" class="form-label">Longitude:</label>
          <input type="number" id="lon{{i}}" formControlName="lon" class="form-control">
          <button type="button" (click)="removeCity(i)" class="btn btn-danger mt-2">Remove</button>
        </div>
      </div>
    </div>
    <button type="button" (click)="addCity()" class="btn btn-success">Add New City</button>
    <button type="submit" class="btn btn-primary">Save</button>


  </form>
</div>

<div class="container mt-4" *ngIf="editingCity">
  <h2>Edit City</h2>
  <form (submit)="saveEdit()">
    <div class="class border">
      <label for="editName" class="form-label">Name:</label>
      <input type="text" class="form-control" id="editName" [(ngModel)]="editingCity.name" name="editName" required>

      <label for="editLat" class="form-label">Latitude:</label>
      <input type="number" class="form-control" id="editLat" [(ngModel)]="editingCity.lat" name="editLat" required>

      <label for="editLon" class="form-label">Longitude:</label>
      <input type="number" class="form-control" id="editLon" [(ngModel)]="editingCity.lon" name="editLon" required>


      <label for="editCountryId" class="form-label">Country:</label>
      <select id="editCountryId" [(ngModel)]="editingCity.countryId" name="editCountryId" class="form-control" required>
        <option value="" disabled>Select a country</option>
        <option *ngFor="let country of countries" [value]="country.id">{{ country.name }}</option>
      </select>
    </div>



    <div class="class mt-3">
      <button type="submit" class="btn btn-success">Save</button>
      <button type="button" class="btn btn-danger" (click)="cancelEdit()">Cancel</button>
    </div>

  </form>
</div>

-----------------------------------------------------------------------------------------
city-list.comonent.css:
=======================
table {
  width: 100%;
  border-collapse: collapse;
  border: 1px solid #ccc;
}

th, td {
  border: 1px solid #ccc;
  padding: 8px;
  text-align: left;
}

button {
  margin-right: 5px;
}

.form-container {
  margin-top: 20px;
  border: 1px solid #ccc;
  padding: 10px;
}

  .form-container label {
    display: block;
    margin-bottom: 5px;
  }

  .form-container input {
    width: 100%;
    padding: 5px;
    margin-bottom: 10px;
  }



-------------------------------------------------------------------------------------------
country--list.comonent.ts:
==========================
import { Component, OnInit } from '@angular/core';
import { CountryService } from '../../services/country.service';
import { Country } from '../../models/country.model';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-country-list',
  templateUrl: './country-list.component.html',
  styleUrls: ['./country-list.component.css']
})
export class CountryListComponent implements OnInit {
  countries: Country[] = [];
  newCountry: Country = new Country(0, '', '', '', 0);
  editingCountry: Country | null = null;


  constructor(private countryService: CountryService) { }

  ngOnInit() {
    this.loadCountries();
  }

  loadCountries() {
    this.countryService.getCountries().subscribe({
      next: response => {
        console.log(response);
        this.countries = response.data; // Assign the data array to 'countries'
      },
      error: error => {
        console.error('Error loading countries:', error);
      }
    });
  }


  loadCountryById(id: any) {
    this.countryService.getCountry(id).subscribe({
      next: response => {
        console.log('Country by ID:', response);
      },
      error: error => {
        console.error('Error loading country by ID:', error);
      }
    });
  }

  deleteCountry(id: any) {
    this.countryService.deleteCountry(id).subscribe({
      next: response => {
        console.log('Country deleted:', response);
        this.loadCountries();
      },
      error: error => {
        console.error('Error deleting country:', error);
      }
    });
  }

  createCountry() {
    this.countryService.postCountry(this.newCountry).subscribe({
      next: response => {
        console.log('Country created:', response);
        this.newCountry = new Country(0, '', '', '', 0); // Reset the form
        this.loadCountries();
      },
      error: error => {
        console.error('Error creating country:', error);
      }
    });
  }

  editCountry(country: Country) {
    this.editingCountry = { ...country }; // Create a copy of the country object
  }

  cancelEdit() {
    this.editingCountry = null;
  }

  saveEdit() {
    if (this.editingCountry) {
      this.countryService
        .putCountry(this.editingCountry.id, this.editingCountry)
        .subscribe({
          next: response => {
            console.log('Country updated:', response);
            this.loadCountries();
            this.editingCountry = null;
          },
          error: error => {
            console.error('Error updating country:', error);
          }
        });
    }
  }
}

-------------------------------------------------------------------------------------------
country-list.comonent.html:
==========================
<div>
  <h2>Country List</h2>
  <table>
    <thead>
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>ISO2</th>
        <th>ISO3</th>
        <th>Total Cities</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let country of countries">
        <td>{{ country.id }}</td>
        <td>{{ country.name }}</td>
        <td>{{ country.iso2 }}</td>
        <td>{{ country.iso3 }}</td>
        <td>{{ country.totCities }}</td>
        <td>

          <button (click)="deleteCountry(country.id)" class="btn btn-danger">Delete</button>
          <button (click)="editCountry(country)" class="btn btn-warning">Edit</button>
        </td>
      </tr>
    </tbody>
  </table>
  <div *ngIf="!editingCountry">
    <h2>Create New Country</h2>
    <form (submit)="createCountry()">
      <label for="name">Name:</label>
      <input type="text" id="name" [(ngModel)]="newCountry.name" name="name" required>

      <label for="iso2">ISO2:</label>
      <input type="text" id="iso2" [(ngModel)]="newCountry.iso2" name="iso2" required>

      <label for="iso3">ISO3:</label>
      <input type="text" id="iso3" [(ngModel)]="newCountry.iso3" name="iso3" required>

      <button type="submit" class="btn btn-primary">Create</button>
    </form>
  </div>
  <div *ngIf="editingCountry">
    <h2>Edit Country</h2>
    <form (submit)="saveEdit()">
      <label for="editName">Name:</label>
      <input type="text" id="editName" [(ngModel)]="editingCountry.name" name="editName" required>

      <label for="editISO2">ISO2:</label>
      <input type="text" id="editISO2" [(ngModel)]="editingCountry.iso2" name="editISO2" required>

      <label for="editISO3">ISO3:</label>
      <input type="text" id="editISO3" [(ngModel)]="editingCountry.iso3" name="editISO3" required>
      <button type="submit" class="btn btn-primary">Save</button>
    </form>
  </div>

</div>
-------------------------------------------------------------------------------------------
country-list.comonent.css:
==========================
table {
  width: 100%;
  border-collapse: collapse;
  border: 1px solid #ccc;
}

th, td {
  border: 1px solid #ccc;
  padding: 8px;
  text-align: left;
}

button {
  margin-right: 5px;
}

form {
  margin-top: 20px;
  border: 1px solid #ccc;
  padding: 10px;
}

label {
  display: block;
  margin-top: 10px;
  font-weight: bold;
  margin-bottom: 5px;
}

input {
  width: 100%;
  padding: 5px;
  margin-top: 5px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
}

----------------------------------------------------------------------------------------------------------------
For Services:
=============

(src>app>services)
	ng g s city	   ====(To create service)
	ng g s country	   ====(To create service)

------------------------------------------------------------

city.service.ts:
===============
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { City } from '../models/city.model';

@Injectable({
  providedIn: 'root'
})
export class CityService {
  private url = 'https://localhost:40443/api/Cities';

  constructor(private http: HttpClient) { }

  getCities(): Observable<any> {
    return this.http.get<any>(this.url);
  }

  getCity(id: any): Observable<any> {
    return this.http.get<any>(`${this.url}/${id}`);
  }

  postCity(city: City): Observable<any> {
    return this.http.post<any>(this.url, city);
  }

  updateCity(id: number, cityData: City): Observable<any> {
    return this.http.put<any>(`${this.url}/${id}`, cityData);
  }

  deleteCity(id: any): Observable<any> {
    return this.http.delete<any>(`${this.url}/${id}`);
  }

}

-----------------------------------------------------------------------

country.service.ts:
===================
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';



@Injectable({
  providedIn: 'root'
})
export class CountryService {
  url = 'https://localhost:40443/api/countries'


  constructor(private http: HttpClient) { }

  getCountries(): Observable<any> {
    return this.http.get<any>(this.url);
  }

  getCountry(id: any): Observable<any> {
    return this.http.get<any>(`${this.url}/${id}`);
  }

  postCountry(countryData: any): Observable<any> {
    return this.http.post<any>(this.url, countryData);
  }

  putCountry(id: any, countryData: any): Observable<any> {

    return this.http.put<any>(`${this.url}/${id}`, countryData);
  }

  deleteCountry(id: any): Observable<any> {
    return this.http.delete<any>(`${this.url}/${id}`);
  }
}

-------------------------------------------------------------------------------------------------------------
For models:
==========

(src>app>models)
	ng g cl city --type=model  ====(To create category model)
	ng g cl country --type=model  ====(To create category model)

---------------------------------------------------------------------
city.model.ts:
--------
import { Country } from "./country.model";

export class City {
  constructor(
    public id: number,
    public name: string,
    public lat: number,
    public lon: number,
    public countryId: number,
    public country: Country
  ) { }
}
------------------------------------
country.model.ts:
-----------
import { City } from "./city.model";

export class Country {
  constructor(
    public id: number,
    public name: string,
    public iso2: string,
    public iso3: string,
    public totCities: number,
    cities?: City[]
  ) { }
}

================================================================================================================== 
7. To add route open app-routing.module.ts:
===========================================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { Country } from './models/country.model';
import { CountryListComponent } from './components/country-list/country-list.component';
import { CityListComponent } from './components/city-list/city-list.component';

const routes: Routes = [
  { path: '', redirectTo: 'city', pathMatch: 'full' },
  { path: 'country', component: CountryListComponent },
  { path: 'city', component: CityListComponent },


];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

------------------------------------------------------------------------------------------------------------
8. open app.component.html add there this:
-----------------------------------------
<div>
  <nav class="navbar navbar-expand-md">
    <div class="collapse navbar-collapse">
      <ul class="navbar-nav ml-auto">
        <li class="nav-item"><a class="nav-link" routerLink="/city">City</a></li>
        <li class="nav-item"><a class="nav-link" routerLink="/country">Country</a></li>
      </ul>
    </div>
  </nav>
</div>
<router-outlet></router-outlet>

------------------------------------------------------------------------------------------------------------
9. open app.component.css add there this:
=========================================
.navbar {
  background-color: #333;
  color: white;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem;
}

.navbar-logo {
  color: white;
  text-decoration: none;
  font-size: 1.5rem;
}

.navbar-nav {
  list-style: none;
  display: flex;
}

  .navbar-nav li {
    margin-right: 1rem;
  }

  .navbar-nav a {
    color: white;
    text-decoration: none;
  }
------------------------------------------------------------------------------------------------------------
10. Open app.module.ts add there this:
------------------------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CountryListComponent } from './components/country-list/country-list.component';
import { CityListComponent } from './components/city-list/city-list.component';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { RouterOutlet } from '@angular/router';

@NgModule({
  declarations: [
    AppComponent,
    CountryListComponent,
    CityListComponent,

  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule,
    FormsModule,
    ReactiveFormsModule,
    BrowserAnimationsModule,
    TooltipModule,
    RouterOutlet
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

------------------------------------------------------------------------------------------------
11.Install ng bootstrap :
------------------------

npm install ngx-bootstrap --save

or

npm install bootstrap ngx-bootstrap --save

------------------------------------------------------------------------------------------------
12.Open index.html add app-root on body like this:
-------------------------------------------------
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>MyExam10</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65">
</head>
<body>
  <app-root></app-root>
</body>
</html>







